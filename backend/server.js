const express = require('express');
const cors = require('cors');
const fs = require('fs-extra');
const path = require('path');
const multer = require('multer');
const sharp = require('sharp');

const app = express();
const PORT = 3001;

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
const DATA_FILE = path.join(__dirname, 'data', 'sections.json');
const UPLOADS_DIR = path.join(__dirname, 'uploads');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
async function ensureDirectories() {
    await fs.ensureDir(path.dirname(DATA_FILE));
    await fs.ensureDir(UPLOADS_DIR);
    await fs.ensureDir(TEMP_UPLOADS_DIR);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ä–µ—Å–∞–π–∑ 50% + –∫–∞—á–µ—Å—Ç–≤–æ 90%)
async function optimizeImage(inputPath, outputPath) {
    try {
        const metadata = await sharp(inputPath).metadata();
        console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${metadata.width}x${metadata.height} -> ${Math.round(metadata.width * 0.5)}x${Math.round(metadata.height * 0.5)}`);
        
        const newWidth = Math.round(metadata.width * 0.5);
        const newHeight = Math.round(metadata.height * 0.5);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: —Ä–µ—Å–∞–π–∑ –¥–æ 50% + –∫–∞—á–µ—Å—Ç–≤–æ 90%
        await sharp(inputPath)
            .resize(newWidth, newHeight, {
                fit: 'inside',
                withoutEnlargement: true
            })
            .jpeg({ quality: 90 })
            .png({ quality: 90 })
            .webp({ quality: 90 })
            .toFile(outputPath);
        
        console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${outputPath}`);
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        return false;
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞)
const TEMP_UPLOADS_DIR = path.join(__dirname, 'temp_uploads');

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, TEMP_UPLOADS_DIR);
    },
    filename: function (req, file, cb) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({ 
    storage: storage,
    limits: {
        fileSize: 50 * 1024 * 1024, // 50MB –ª–∏–º–∏—Ç
        files: 1 // –ú–∞–∫—Å–∏–º—É–º 1 —Ñ–∞–π–ª –∑–∞ —Ä–∞–∑
    },
    fileFilter: (req, file, cb) => {
        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
        }
    }
});

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use('/uploads', express.static(UPLOADS_DIR));

// –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const defaultSections = [
    {
        id: 'hero',
        title: '–ü—è—Ç—ã–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ RE‚ÜíMARKET',
        text: '–§–µ—Å—Ç–∏–≤–∞–ª—å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –≤ –ú–æ—Å–∫–≤–µ. –í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è 3 –∞–≤–≥—É—Å—Ç–∞ 2025 –≥–æ–¥–∞ –≤ —Å–∞–º–æ–º —Å–µ—Ä–¥—Ü–µ –≥–æ—Ä–æ–¥–∞.',
        image: '',
        gallery: [],
        galleryEnabled: false,
        hidden: false
    }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function loadData() {
    try {
        if (await fs.pathExists(DATA_FILE)) {
            const data = await fs.readJSON(DATA_FILE);
            return data;
        } else {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await saveData(defaultSections);
            return defaultSections;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        return defaultSections;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function saveData(sections) {
    try {
        await fs.writeJSON(DATA_FILE, sections, { spaces: 2 });
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}

// API Routes

// GET /api/data - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
app.get('/api/data', async (req, res) => {
    try {
        const sections = await loadData();
        res.json(sections);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
    }
});

// POST /api/data - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
app.post('/api/data', async (req, res) => {
    try {
        const { sections } = req.body;
        
        if (!Array.isArray(sections)) {
            return res.status(400).json({ error: '–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å–µ–∫—Ü–∏–π' });
        }
        
        const success = await saveData(sections);
        
        if (success) {
            res.json({ message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', sections });
        } else {
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// POST /api/upload - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
app.post('/api/upload', (req, res) => {
    upload.single('image')(req, res, async (err) => {
        if (err instanceof multer.MulterError) {
            console.error('–û—à–∏–±–∫–∞ multer:', err);
            if (err.code === 'LIMIT_FILE_SIZE') {
                return res.status(400).json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 50MB.' });
            }
            return res.status(400).json({ error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${err.message}` });
        } else if (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', err);
            return res.status(400).json({ error: err.message });
        }
        
        try {
            if (!req.file) {
                return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
            }
            
            console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É:', req.file.filename);
            
            // –ü—É—Ç–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤
            const tempPath = req.file.path;
            const optimizedFilename = req.file.filename;
            const optimizedPath = path.join(UPLOADS_DIR, optimizedFilename);
            
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ä–µ—Å–∞–π–∑ 50% + –∫–∞—á–µ—Å—Ç–≤–æ 90%)
            const optimized = await optimizeImage(tempPath, optimizedPath);
            
            if (!optimized) {
                // –ï—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∫–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                await fs.copy(tempPath, optimizedPath);
                console.log('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª');
            }
            
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await fs.remove(tempPath);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            const fileUrl = `/uploads/${optimizedFilename}`;
            res.json({ 
                message: optimized ? '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω (50% —Ä–∞–∑–º–µ—Ä, 90% –∫–∞—á–µ—Å—Ç–≤–æ)' : '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
                url: fileUrl,
                filename: optimizedFilename,
                optimized: optimized
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
            
            // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if (req.file && req.file.path) {
                try {
                    await fs.remove(req.file.path);
                } catch (cleanupError) {
                    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', cleanupError);
                }
            }
            
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞' });
        }
    });
});

// GET /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'ok', 
        message: 'RE‚ÜíMARKET Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç',
        timestamp: new Date().toISOString()
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    await ensureDirectories();
    
    app.listen(PORT, () => {
        console.log(`üöÄ RE‚ÜíMARKET Backend API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
        console.log(`üìù API endpoints:`);
        console.log(`   GET  /api/data - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ`);
        console.log(`   POST /api/data - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ`);
        console.log(`   POST /api/upload - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`);
    });
}

startServer().catch(console.error); 