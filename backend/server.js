const express = require('express');
const cors = require('cors');
const fs = require('fs-extra');
const path = require('path');
const multer = require('multer');

const app = express();
const PORT = 3001;

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
const DATA_FILE = path.join(__dirname, 'data', 'sections.json');
const UPLOADS_DIR = path.join(__dirname, 'uploads');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
async function ensureDirectories() {
    await fs.ensureDir(path.dirname(DATA_FILE));
    await fs.ensureDir(UPLOADS_DIR);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, UPLOADS_DIR);
    },
    filename: function (req, file, cb) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({ storage: storage });

// Middleware
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use('/uploads', express.static(UPLOADS_DIR));

// –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const defaultSections = [
    {
        id: 'hero',
        title: '–ü—è—Ç—ã–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ RE‚ÜíMARKET',
        text: '–§–µ—Å—Ç–∏–≤–∞–ª—å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –≤ –ú–æ—Å–∫–≤–µ. –í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è 3 –∞–≤–≥—É—Å—Ç–∞ 2025 –≥–æ–¥–∞ –≤ —Å–∞–º–æ–º —Å–µ—Ä–¥—Ü–µ –≥–æ—Ä–æ–¥–∞.',
        image: '',
        gallery: [],
        galleryEnabled: false,
        hidden: false
    }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function loadData() {
    try {
        if (await fs.pathExists(DATA_FILE)) {
            const data = await fs.readJSON(DATA_FILE);
            return data;
        } else {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await saveData(defaultSections);
            return defaultSections;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        return defaultSections;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function saveData(sections) {
    try {
        await fs.writeJSON(DATA_FILE, sections, { spaces: 2 });
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}

// API Routes

// GET /api/data - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
app.get('/api/data', async (req, res) => {
    try {
        const sections = await loadData();
        res.json(sections);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
    }
});

// POST /api/data - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
app.post('/api/data', async (req, res) => {
    try {
        const { sections } = req.body;
        
        if (!Array.isArray(sections)) {
            return res.status(400).json({ error: '–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å–µ–∫—Ü–∏–π' });
        }
        
        const success = await saveData(sections);
        
        if (success) {
            res.json({ message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', sections });
        } else {
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// POST /api/upload - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.post('/api/upload', upload.single('image'), (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const fileUrl = `/uploads/${req.file.filename}`;
        res.json({ 
            message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
            url: fileUrl,
            filename: req.file.filename 
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞' });
    }
});

// GET /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'ok', 
        message: 'RE‚ÜíMARKET Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç',
        timestamp: new Date().toISOString()
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    await ensureDirectories();
    
    app.listen(PORT, () => {
        console.log(`üöÄ RE‚ÜíMARKET Backend API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
        console.log(`üìù API endpoints:`);
        console.log(`   GET  /api/data - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ`);
        console.log(`   POST /api/data - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ`);
        console.log(`   POST /api/upload - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`);
    });
}

startServer().catch(console.error); 